Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Центральная тема
> borderColor=`#0288D1`,fillColor=`#E8E8E8`,textColor=`#000000`


## Плавающая тема
> align=`left`,collapsed=`true`


### Рубли
> align=`left`,collapsed=`true`,textColor=`#333333`


#### Тинькофф
> align=`left`,collapsed=`true`,textColor=`#333333`


##### 50\.000 рублей
> align=`left`,textColor=`#333333`


#### Альфа
> align=`left`,collapsed=`true`,textColor=`#333333`


##### 150\.000\-6%
> align=`left`,textColor=`#333333`


#### Тинькофф инвестиции
> align=`left`,collapsed=`true`,textColor=`#333333`


##### 200\.000 рублей
> align=`left`,textColor=`#333333`


### Что делать с рублями? 
> align=`left`,collapsed=`true`,textColor=`#333333`


#### Антикризис бизнес
> align=`left`,collapsed=`true`,textColor=`#333333`


##### Грибы
> align=`left`,textColor=`#333333`


#### Оборудование и материалы для выращивания грибной культуры 
> align=`left`,textColor=`#333333`


#### Доллары
> align=`left`,textColor=`#333333`


#### Криптовалюта
> align=`left`,textColor=`#333333`


#### Золото
> align=`left`,textColor=`#333333`


#### Акции металлургов
> align=`left`,textColor=`#333333`


#### Рубли
> align=`left`,collapsed=`true`,textColor=`#333333`


##### Конвертировать
> align=`left`,textColor=`#333333`


### Время
> align=`left`,collapsed=`true`,textColor=`#333333`


#### Тестирование
> align=`left`,collapsed=`true`,textColor=`#333333`


##### Работа
> align=`left`,collapsed=`true`,textColor=`#333333`


###### Тестирование
> align=`left`,textColor=`#333333`


##### Образование
> align=`left`,textColor=`#333333`


##### Обучение
> align=`left`,collapsed=`true`,textColor=`#333333`


###### JavaRush
> align=`left`,textColor=`#333333`


###### Курсы обучения
> align=`left`,textColor=`#333333`


#### Грибы
> align=`left`,textColor=`#333333`


### Оборудование и материалы для фермы
> align=`left`,collapsed=`true`,textColor=`#333333`


#### Банки
> align=`left`,textColor=`#333333`


#### Реактор
> align=`left`,textColor=`#333333`


### Вывести в криптовалюты
> align=`left`,textColor=`#333333`


### Образование
> align=`left`,textColor=`#333333`


### Квартира в районе цирка
> align=`left`,collapsed=`true`,textColor=`#333333`


#### 1\-к\. квартира
> align=`left`,textColor=`#333333`


### Загранпаспорт
> align=`left`,textColor=`#333333`


## Правила
> align=`left`


###  ваш код должен быть прозрачен для других разработчиков
> align=`left`,textColor=`#333333`


## Уровни
> align=`left`


### Коллекции Collection
> align=`left`,textColor=`#333333`


#### Иерархия 
> align=`left`,textColor=`#333333`


##### \<\<Interface\>\> Set
> align=`left`,textColor=`#333333`


###### \<\<Interface\>\> SortedSet
> align=`left`,textColor=`#333333`


####### TreeSet
> align=`left`,textColor=`#333333`


###### HashSet
> align=`left`,textColor=`#333333`


###### LinkedHashSet
> align=`left`,textColor=`#333333`


##### \<\<Interface\>\> List
> align=`left`,textColor=`#333333`


###### Vector
> align=`left`,textColor=`#333333`


####### Stack
> align=`left`,textColor=`#333333`


######## LOFO
> align=`left`,textColor=`#333333`


###### ArrayList
> align=`left`,textColor=`#333333`


###### LinkedList
> align=`left`,textColor=`#333333`


##### \<\<Interface\>\> Queue
> align=`left`,textColor=`#333333`


###### \<\<Interface\>\> Deque
> align=`left`,textColor=`#333333`


####### LinkedList
> align=`left`,textColor=`#333333`


##### \<\<Interface\>\>Map \(не входит в Collection\)
> align=`left`,textColor=`#333333`


###### \<\<Interface\>\> SortedMap
> align=`left`,textColor=`#333333`


####### TreeMap
> align=`left`,textColor=`#333333`


###### HashMap
> align=`left`,textColor=`#333333`


###### LinkedHashMap
> align=`left`,textColor=`#333333`


###### HashTable
> align=`left`,textColor=`#333333`


#### Коллекции могут хранить любые ссылочные типы
> align=`left`,textColor=`#333333`


#### Преимущества 
> align=`left`,textColor=`#333333`


##### Коллекции реализуют \- рекурсивные типы данных, такие как списки и деревья
> align=`left`,textColor=`#333333`


##### Недостатки массивов
> align=`left`,textColor=`#333333`


###### Массивы имеют конечный размер, необходимо следить за размером\. 
> align=`left`,textColor=`#333333`


###### Индексная адресация
> align=`left`,textColor=`#333333`


####### ограничивает возможности добавления и удаления объектов
> align=`left`,textColor=`#333333`


#### List
> align=`left`,textColor=`#333333`


##### упорядоченный список 
> align=`left`,textColor=`#333333`


##### Объекты хранятся в порядке их добавления в список\. 
> align=`left`,textColor=`#333333`


##### Доступ к элементам списка осуществляется по индексу\.
> align=`left`,textColor=`#333333`


#### Set
> align=`left`,textColor=`#333333`


##### Множество неповторяющихся объектов\.
> align=`left`,textColor=`#333333`


##### Разрешено наличие только одной ссылки типа null\.
> align=`left`,textColor=`#333333`


#### Queue
> align=`left`,textColor=`#333333`


##### предназначенная для хранения элементов в порядке, нужном для их обработки\.
> align=`left`,textColor=`#333333`


##### Очереди упорядочивают 
> align=`left`,textColor=`#333333`


###### FIFO
> align=`left`,textColor=`#333333`


##### Deque
> align=`left`,textColor=`#333333`


###### Deque\<E\> наследует Queue\<E\>
> align=`left`,textColor=`#333333`


###### Двунаправленная очередь\. Позволяет добавлять и удалять объекты с двух концов\. 
> align=`left`,textColor=`#333333`


###### Может быть использован в качестве стека\.
> align=`left`,textColor=`#333333`


##### Queue
> align=`left`,textColor=`#333333`


###### предназначенная для хранения элементов в порядке, нужном для их обработки\.
> align=`left`,textColor=`#333333`


###### Очереди упорядочивают 
> align=`left`,textColor=`#333333`


####### FIFO
> align=`left`,textColor=`#333333`


#### Реализация List Set Map
> align=`left`,textColor=`#333333`


##### Интерфейс:
> align=`left`,textColor=`#333333`


##### List
> align=`left`,textColor=`#333333`


###### Класс/Реализация:
> align=`left`,textColor=`#333333`


###### ArrayList
> align=`left`,textColor=`#333333`


####### Описание:
> align=`left`,textColor=`#333333`


####### Список
> align=`left`,textColor=`#333333`


###### LinkedList
> align=`left`,textColor=`#333333`


####### Список
> align=`left`,textColor=`#333333`


###### Vector
> align=`left`,textColor=`#333333`


####### Вектор
> align=`left`,textColor=`#333333`


###### Stack
> align=`left`,textColor=`#333333`


####### Стек
> align=`left`,textColor=`#333333`


##### Map
> align=`left`,textColor=`#333333`


###### HashMap
> align=`left`,textColor=`#333333`


####### Карта/Словарь
> align=`left`,textColor=`#333333`


###### TreeMap
> align=`left`,textColor=`#333333`


####### Карта/Словарь
> align=`left`,textColor=`#333333`


###### SortedMap
> align=`left`,textColor=`#333333`


####### Сортированный словарь
> align=`left`,textColor=`#333333`


###### HashTable
> align=`left`,textColor=`#333333`


####### Хеш\-таблица
> align=`left`,textColor=`#333333`


##### Set
> align=`left`,textColor=`#333333`


###### HashSet
> align=`left`,textColor=`#333333`


####### Множество
> align=`left`,textColor=`#333333`


###### TreeSet
> align=`left`,textColor=`#333333`


####### Множество
> align=`left`,textColor=`#333333`


###### SortedSet
> align=`left`,textColor=`#333333`


####### Сортированное множество
> align=`left`,textColor=`#333333`


#### Черный пояс
> align=`left`,textColor=`#333333`


##### Многопоточность
> align=`left`,textColor=`#333333`


##### RegEx
> align=`left`,textColor=`#333333`


##### Работа с файлами
> align=`left`,textColor=`#333333`


##### NestedClass
> align=`left`,textColor=`#333333`


##### Рефлексия
> align=`left`,textColor=`#333333`


##### Рекурсия
> align=`left`,textColor=`#333333`


##### Comparation
> align=`left`,textColor=`#333333`


##### Интерфейсы
> align=`left`,textColor=`#333333`


###### Comparable
> align=`left`,textColor=`#333333`


###### Comparator
> align=`left`,textColor=`#333333`


##### Аннотации
> align=`left`,textColor=`#333333`


##### Collection
> align=`left`,textColor=`#333333`


###### List
> align=`left`,textColor=`#333333`


####### Vector
> align=`left`,textColor=`#333333`


######## Stack
> align=`left`,textColor=`#333333`


####### LinkedList
> align=`left`,textColor=`#333333`


####### ArrayList
> align=`left`,textColor=`#333333`


###### Set
> align=`left`,textColor=`#333333`


###### Queue
> align=`left`,textColor=`#333333`


###### Map
> align=`left`,textColor=`#333333`


####### HashMap
> align=`left`,textColor=`#333333`


##### Generics \<DataType\>
> align=`left`,textColor=`#333333`


##### Lambda выражения
> align=`left`,textColor=`#333333`


##### Stream
> align=`left`,textColor=`#333333`


##### Iterator
> align=`left`,textColor=`#333333`


##### Enums
> align=`left`,textColor=`#333333`


##### Equals
> align=`left`,textColor=`#333333`


##### Класс Scanner
> align=`left`,textColor=`#333333`


##### ООП 
> align=`left`,textColor=`#333333`


###### Абстракция
> align=`left`,textColor=`#333333`


####### Основная идея состоят в том, чтобы представить объект минимальным набором свойств и методов
> align=`left`,textColor=`#333333`


#######  и при этом с достаточной точностью для решения задачи\.
> align=`left`,textColor=`#333333`


###### Полиморфизм
> align=`left`,textColor=`#333333`


####### Возможность работать с несколькими типами так, будто это один и тот же тип\. 
> align=`left`,textColor=`#333333`


####### При этом поведение объектов будет разным в зависимости от типа, к которому они принадлежат
> align=`left`,textColor=`#333333`


###### Инкапсуляция
> align=`left`,textColor=`#333333`


####### Возможность сокрытия реализации
> align=`left`,textColor=`#333333`


####### ограничение доступа к данным и возможностям их изменения\.
> align=`left`,textColor=`#333333`


####### Лучший способ упростить что\-то — скрыть все сложное от посторонних глаз
> align=`left`,textColor=`#333333`


####### скрыть все методы
> align=`left`,textColor=`#333333`


######## private
> align=`left`,textColor=`#333333`


####### для взаимодействия
> align=`left`,textColor=`#333333`


######## public
> align=`left`,textColor=`#333333`


###### Наследование
> align=`left`,textColor=`#333333`


####### Механизм, который позволяет описать новый класс на основе существующего \(родительского\)\. 
> align=`left`,textColor=`#333333`


####### При этом свойства и функциональность родительского класса заимствуются новым классом\.
> align=`left`,textColor=`#333333`


### 10 уровень: Работа со строками
> align=`left`,textColor=`#333333`


#### Литералы в Java
> align=`left`,textColor=`#333333`


##### Литералы целых чисел
> align=`left`,textColor=`#333333`


###### Данные, вписанные прямо в код ПО
> align=`left`,textColor=`#333333`


###### int является стандартным типом целых чисел в Java
> align=`left`,textColor=`#333333`


###### Значение литерала лежит внутри диапазона доступных значений типа переменной\.
> align=`left`,textColor=`#333333`


####### byte
> align=`left`,textColor=`#333333`


######## MAX 127B
> align=`left`,textColor=`#333333`


####### short
> align=`left`,textColor=`#333333`


######## S
> align=`left`,textColor=`#333333`


####### int
> align=`left`,textColor=`#333333`


####### long 
> align=`left`,textColor=`#333333`


###### Java разрешили вставлять в числовые литералы символы подчеркивания
> align=`left`,textColor=`#333333`


####### long a = 3\_000\_000\_000L; 
> align=`left`,textColor=`#333333`


######## Скомпилируется отлично\.
> align=`left`,textColor=`#333333`


###### Java тип есть у всего, включая литералы
> align=`left`,textColor=`#333333`


####### L = long
> align=`left`,textColor=`#333333`


####### I = int
> align=`left`,textColor=`#333333`


####### S = short
> align=`left`,textColor=`#333333`


###### Запятую ,
> align=`left`,textColor=`#333333`


####### Отделения друг от друга аргументов при вызове метода\.
> align=`left`,textColor=`#333333`


##### Литералы с плавающей точкой
> align=`left`,textColor=`#333333`


###### Есть точка? это число — литерал с плавающей точкой double
> align=`left`,textColor=`#333333`


###### Создать литерал типа float, для этого к числу в конце нужно приписать букву F \(или f\)
> align=`left`,textColor=`#333333`


###### превратить целочисленный литерал в литерал типа float или double, просто приписав к нему суффикс F \(для float\) или D \(для double\)
> align=`left`,textColor=`#333333`


#######     public double d = 100\.0D;
> align=`left`,textColor=`#333333`


#######     public float f = 200F;
> align=`left`,textColor=`#333333`


##### Литералы строк
> align=`left`,textColor=`#333333`


###### Вся строка с двух сторон обрамляется двойными кавычками\.
> align=`left`,textColor=`#333333`


###### Можно разбить на несколько строк и склеить «оператором плюс»
> align=`left`,textColor=`#333333`


##### Литералы символов
> align=`left`,textColor=`#333333`


###### Символьный литерал обрамляется одинарными кавычками
> align=`left`,textColor=`#333333`


###### Внутри одинарных кавычек обязательно должен быть символ и только 1
> align=`left`,textColor=`#333333`


###### '@' 
> align=`left`,textColor=`#333333`


####### Литерал типа char\. Содержит символ @
> align=`left`,textColor=`#333333`


###### символ из кодировки Unicode
> align=`left`,textColor=`#333333`


####### Сначала идет префикс \\u
> align=`left`,textColor=`#333333`


####### Затем 4 шестнадцатеричных символа
> align=`left`,textColor=`#333333`


#### Кодировка Unicode
> align=`left`,textColor=`#333333`


##### Java был первым ЯП
> align=`left`,textColor=`#333333`


###### принявший Кодировку Unicode как стандарт хранения
> align=`left`,textColor=`#333333`


##### UTF\-8
> align=`left`,textColor=`#333333`


##### Unicode – UTF\-16
> align=`left`,textColor=`#333333`


###### способна вместить до 65,536 символов
> align=`left`,textColor=`#333333`


###### можно найти почти все символы всех алфавитов мира
> align=`left`,textColor=`#333333`


##### \\u \+ шестнадцатеричные цифры кода
> align=`left`,textColor=`#333333`


###### ©
> align=`left`,textColor=`#333333`


####### = \\u00A9
> align=`left`,textColor=`#333333`


##### Некоторые символы, которые визуально выглядят как один символ, в строке кодируются двумя char'ами:
> align=`left`,textColor=`#333333`


###### 🔊
> align=`left`,textColor=`#333333`


####### \\uD83D\\uDD0A
> align=`left`,textColor=`#333333`


##### Java может выводить в консоль даже emoji
> align=`left`,textColor=`#333333`


###### 😎
> align=`left`,textColor=`#333333`


##### Кодировки
> align=`left`,textColor=`#333333`


###### Java считается языком высокого уровня, полностью абстрагированным от железа, на котором выполняется
> align=`left`,textColor=`#333333`


###### Любой целочисленный литерал, начинающийся с 0, считается Java восьмеричным\.
> align=`left`,textColor=`#333333`


#### Экранирование символов
> align=`left`,textColor=`#333333`


##### перед кавычками добавляете символ \\
> align=`left`,textColor=`#333333`


###### \\"Друзья\\"
> align=`left`,textColor=`#333333`


##### Спец символы
> align=`left`,textColor=`#333333`


###### char c = ' " ';
> align=`left`,textColor=`#333333`


###### \\n
> align=`left`,textColor=`#333333`


####### Перенос строки
> align=`left`,textColor=`#333333`


###### \\t
> align=`left`,textColor=`#333333`


####### ТАБ
> align=`left`,textColor=`#333333`


###### \\b
> align=`left`,textColor=`#333333`


####### возврата на один символ
> align=`left`,textColor=`#333333`


####### = Backspace
> align=`left`,textColor=`#333333`


######## удаляет последний символ
> align=`left`,textColor=`#333333`


###### \\r
> align=`left`,textColor=`#333333`


####### возврата каретки
> align=`left`,textColor=`#333333`


####### выводимый текст будет перетирать существующий\.
> align=`left`,textColor=`#333333`


###### \\f
> align=`left`,textColor=`#333333`


####### прогона страницы новая 
> align=`left`,textColor=`#333333`


####### принтер просто прокручивал текущий лист
> align=`left`,textColor=`#333333`


###### \\'
> align=`left`,textColor=`#333333`


####### одинарную кавычку
> align=`left`,textColor=`#333333`


###### \\"
> align=`left`,textColor=`#333333`


####### двойную кавычку
> align=`left`,textColor=`#333333`


###### \\\\
> align=`left`,textColor=`#333333`


####### обратный слеш
> align=`left`,textColor=`#333333`


#### Класс StringTokenizer
> align=`left`,textColor=`#333333`


##### StringTokenizer
> align=`left`,textColor=`#333333`


###### Класс
> align=`left`,textColor=`#333333`


######  разделять строку на подстроки
> align=`left`,textColor=`#333333`


###### StringTokenizer имя = new StringTokenizer\(строка, разделители\);
> align=`left`,textColor=`#333333`


##### nextToken\(\)
> align=`left`,textColor=`#333333`


###### Возвращает следующую подстроку
> align=`left`,textColor=`#333333`


##### hasMoreTokens\(\)
> align=`left`,textColor=`#333333`


###### Проверяет, есть ли еще подстроки\.
> align=`left`,textColor=`#333333`


##### countTokens
> align=`left`,textColor=`#333333`


##### Пример
> align=`left`,textColor=`#333333`


#### Класс String
> align=`left`,textColor=`#333333`


##### Устройство класса String
> align=`left`,textColor=`#333333`


###### Класс String — самый популярный класс в Java после типа int\.
> align=`left`,textColor=`#333333`


###### Строки в Java — это неизменяемые объекты \(immutable\)
> align=`left`,textColor=`#333333`


###### Данные нужно хранить в памяти отдельно от кода\.
> align=`left`,textColor=`#333333`


###### Класс String на самом деле очень просто: внутри него находится массив символов \(char\), который хранит все символы строки
> align=`left`,textColor=`#333333`


####### String очень важен, в нем используется очень много оптимизаций, и данные хранятся внутри не в виде массива символов, а просто в виде массива байтов\.
> align=`left`,textColor=`#333333`


###### Задача заменить / на \\
> align=`left`,textColor=`#333333`


####### использование массива char’ов
> align=`left`,textColor=`#333333`


####### методов split\(\) и join\(\)
> align=`left`,textColor=`#333333`


####### replace\(char oldChar, char newChar\)
> align=`left`,textColor=`#333333`


###### В коде фигурируют только ссылки на объекты\-строки\.
> align=`left`,textColor=`#333333`


##### Методы класса String
> align=`left`,textColor=`#333333`


###### int length\(\)
> align=`left`,textColor=`#333333`


####### Возвращает количество символов в строке
> align=`left`,textColor=`#333333`


###### boolean isEmpty\(\)
> align=`left`,textColor=`#333333`


####### Проверяет, что строка == пустая строка
> align=`left`,textColor=`#333333`


###### String\[\] split\(String regex\)
> align=`left`,textColor=`#333333`


####### Разделяет строку на несколько подстрок\.
> align=`left`,textColor=`#333333`


###### boolean isBlank\(\)
> align=`left`,textColor=`#333333`


####### Проверяет, что в строке — только whitespace\-символы: пробел, tab, enter и т\.п\.
> align=`left`,textColor=`#333333`


###### String intern\(\)
> align=`left`,textColor=`#333333`


####### Помещает строку в пул StringPool\.
> align=`left`,textColor=`#333333`


###### char\[\] toCharArray\(\)
> align=`left`,textColor=`#333333`


####### Возвращает массив символов \(копию\), из которых состоит строка
> align=`left`,textColor=`#333333`


###### char charAt\(int index\)
> align=`left`,textColor=`#333333`


####### Возвращает символ, который стоит на index\-позиции в строке\.
> align=`left`,textColor=`#333333`


###### byte\[\] getBytes\(\)
> align=`left`,textColor=`#333333`


####### Преобразует строку в набор байт и возвращает массив байт\.
> align=`left`,textColor=`#333333`


##### Метод StringPool
> align=`left`,textColor=`#333333`


###### Цель его создания — оптимизация хранения строк\.
> align=`left`,textColor=`#333333`


###### Просто используется ссылка на строку из StringPool
> align=`left`,textColor=`#333333`


###### StringPool \- это специальный массив для хранения строк\. 
> align=`left`,textColor=`#333333`


###### Данные нужно хранить в памяти отдельно от кода\.
> align=`left`,textColor=`#333333`


###### В коде фигурируют только ссылки на объекты\-строки\.
> align=`left`,textColor=`#333333`


###### Метод intern\(\)
> align=`left`,textColor=`#333333`


####### Метод intern\(\) добавит строку в StringPool, если ее еще там нет, и вернет ссылку на строку из StringPool
> align=`left`,textColor=`#333333`


####### Пример
> align=`left`,textColor=`#333333`


######## String a = new String\("Привет"\);<br/>String b = new String\("Привет"\);<br/>String t1 = a\.intern\(\);<br/>String t2 = b\.intern\(\);<br/>System\.out\.println\(a == b\);<br/>System\.out\.println\(t1 == t2\);
> align=`left`,textColor=`#333333`


######### false
> align=`left`,textColor=`#333333`


######### true
> align=`left`,textColor=`#333333`


####### О нем любят спрашивать на собеседованиях
> align=`left`,textColor=`#333333`


##### Метод String\.format\(\)
> align=`left`,textColor=`#333333`


###### Класс StringFormatter
> align=`left`,textColor=`#333333`


###### Позволяет задать шаблон объединения строки с данными
> align=`left`,textColor=`#333333`


###### String имя = String\.format\(шаблон, параметры\);
> align=`left`,textColor=`#333333`


####### В метод format\(\) первым параметром передают строку\-шаблон
> align=`left`,textColor=`#333333`


####### Где нужно вставлять данные %d, %s
> align=`left`,textColor=`#333333`


####### Параметр по его номеру \(нумерация начинается с 1 ед\), нужно записать %1$d
> align=`left`,textColor=`#333333`


###### String\.format\("Age=%d, Name=%s", age, name\);
> align=`left`,textColor=`#333333`


####### подставить строку пишем %s, если число — %d
> align=`left`,textColor=`#333333`


###### Список параметров, которые можно использовать внутри шаблона:
> align=`left`,textColor=`#333333`


####### %s
> align=`left`,textColor=`#333333`


######## String
> align=`left`,textColor=`#333333`


####### %d
> align=`left`,textColor=`#333333`


######## целое число: byte, short, int, long
> align=`left`,textColor=`#333333`


####### %f
> align=`left`,textColor=`#333333`


######## вещественное число: float, double
> align=`left`,textColor=`#333333`


####### %b
> align=`left`,textColor=`#333333`


######## boolean
> align=`left`,textColor=`#333333`


####### %c
> align=`left`,textColor=`#333333`


######## char
> align=`left`,textColor=`#333333`


####### %t
> align=`left`,textColor=`#333333`


######## Date
> align=`left`,textColor=`#333333`


####### %%
> align=`left`,textColor=`#333333`


######## Символ %
> align=`left`,textColor=`#333333`


###### У класса String есть метод format\(\)
> align=`left`,textColor=`#333333`


##### Извлечение подстроки из строки
> align=`left`,textColor=`#333333`


###### substring\(\), который возвращал часть строки\.
> align=`left`,textColor=`#333333`


###### Методы
> align=`left`,textColor=`#333333`


####### String substring\(int beginIndex, int endIndex\)
> align=`left`,textColor=`#333333`


######## Возвращает подстроку, заданную интервалом символов beginIndex\.\.endIndex\.
> align=`left`,textColor=`#333333`


######## "Привет"\.substring\(0, 3\);
> align=`left`,textColor=`#333333`


######### "При"
> align=`left`,textColor=`#333333`


######## Если параметр endIndex не указывается \(а так можно\), подстрока берется от символа beginIndex и до конца строки\.
> align=`left`,textColor=`#333333`


####### String repeat\(int count\)
> align=`left`,textColor=`#333333`


######## Повторяет текущую строку n раз
> align=`left`,textColor=`#333333`


######## Метод repeat просто повторяет текущую строку n раз\.
> align=`left`,textColor=`#333333`


####### String replace\(char oldChar, char newChar\)
> align=`left`,textColor=`#333333`


######## Возвращает новую строку: заменяет символ oldChar на символ newChar
> align=`left`,textColor=`#333333`


######## Длина строки при этом не меняется\.
> align=`left`,textColor=`#333333`


####### String replaceFirst\(String regex, String replacement\)
> align=`left`,textColor=`#333333`


######## Заменяет в текущей строке подстроку, заданную регулярным выражением\.
> align=`left`,textColor=`#333333`


######## Метод replaceFirst\(\) заменяет первое вхождение переданной подстроки на заданную подстроку\.
> align=`left`,textColor=`#333333`


####### String replaceAll\(String regex, String replacement\)
> align=`left`,textColor=`#333333`


######## Заменяет в текущей строке все подстроки, совпадающие с регулярным выражением\.
> align=`left`,textColor=`#333333`


######## Метод replaceAll\(\) заменяет все вхождения одной подстроки на другую\.
> align=`left`,textColor=`#333333`


####### String toLowerCase\(\)
> align=`left`,textColor=`#333333`


######## Преобразует строку к нижнему регистру
> align=`left`,textColor=`#333333`


####### String toUpperCase\(\)
> align=`left`,textColor=`#333333`


######## Преобразует строку к верхнему регистру
> align=`left`,textColor=`#333333`


####### String trim\(\)
> align=`left`,textColor=`#333333`


######## Удаляет все пробелы в начале и конце строки
> align=`left`,textColor=`#333333`


##### Определение позиции элемента в строке
> align=`left`,textColor=`#333333`


###### Поиск одной строки в другой
> align=`left`,textColor=`#333333`


###### Методы
> align=`left`,textColor=`#333333`


####### int indexOf\(String str\)
> align=`left`,textColor=`#333333`


######## Ищет строку str в текущей строке\. Возвращает индекс первого символа встретившийся строки\.
> align=`left`,textColor=`#333333`


####### int indexOf\(String str, int index\)
> align=`left`,textColor=`#333333`


######## Ищет строку str в текущей строке, пропустив index первых символов\. Возвращает индекс найденного вхождения\.
> align=`left`,textColor=`#333333`


####### int lastIndexOf\(String str\)
> align=`left`,textColor=`#333333`


######## Ищет строку str в текущей строке с конца\. Возвращает индекс первого вхождения\.
> align=`left`,textColor=`#333333`


####### int lastIndexOf\(String str, int index\)
> align=`left`,textColor=`#333333`


######## Ищет строку str в текущей строке с конца, пропустив index первых символов\.
> align=`left`,textColor=`#333333`


####### boolean matches\(String regex\)
> align=`left`,textColor=`#333333`


######## Проверяет, что текущая строка совпадает с шаблоном, заданным регулярным выражением\.
> align=`left`,textColor=`#333333`


###### Методы для определение позиции элемента в строке
> align=`left`,textColor=`#333333`


####### Методы
> align=`left`,textColor=`#333333`


######## indexOf\(int ch\)
> align=`left`,textColor=`#333333`


######## indexOf\(int ch, int fromIndex\)
> align=`left`,textColor=`#333333`


######## indexOf\(String str\)
> align=`left`,textColor=`#333333`


######## indexOf\(String str, int fromIndex\)
> align=`left`,textColor=`#333333`


######## lastIndexOf\(int ch\)
> align=`left`,textColor=`#333333`


######## lastIndexOf\(int ch, int fromIndex\)
> align=`left`,textColor=`#333333`


######## lastIndexOf\(String str\)
> align=`left`,textColor=`#333333`


######## lastIndexOf\(String str, int fromIndex\)
> align=`left`,textColor=`#333333`


####### Где
> align=`left`,textColor=`#333333`


######## ch — искомый символ \(char\)
> align=`left`,textColor=`#333333`


######## str — искомая строка
> align=`left`,textColor=`#333333`


######## fromIndex — позиция с которой нужно искать элемент
> align=`left`,textColor=`#333333`


######## методы indexOf — возвращают позицию первого найденного элемента
> align=`left`,textColor=`#333333`


######## методы lastIndexOf — возвращают позицию последнего найденного элемента
> align=`left`,textColor=`#333333`


####### Если искомый элемент не найден, методы вернут в строке \-1\.
> align=`left`,textColor=`#333333`


##### Сравнение строк в Java
> align=`left`,textColor=`#333333`


###### Сравнение — одна из самых частых вещей, которая делается со строками\.
> align=`left`,textColor=`#333333`


###### boolean equals\(String str\)
> align=`left`,textColor=`#333333`


####### Строки считаются равными, если все их символы совпадают\.
> align=`left`,textColor=`#333333`


###### boolean equalsIgnoreCase\(String str\)
> align=`left`,textColor=`#333333`


###### int compareTo\(String str\)
> align=`left`,textColor=`#333333`


####### Сравнивает строки лексикографически\. Возвращает 0, если строки равны\. Число меньше нуля, если текущая строка меньше строки\-параметра\. Число больше нуля, если текущая строка больше строки\-параметра
> align=`left`,textColor=`#333333`


###### int compareToIgnoreCase\(String str\)
> align=`left`,textColor=`#333333`


####### Сравнивает строки лексикографически, игнорирует регистр\. Возвращает 0, если строки равны\. Число меньше нуля, если текущая строка меньше строки\-параметра\. Число больше нуля, если текущая строка больше строки\-параметра
> align=`left`,textColor=`#333333`


###### boolean regionMatches\(int toffset, String str, int offset, int len\)
> align=`left`,textColor=`#333333`


####### Сравнивает части строк
> align=`left`,textColor=`#333333`


###### boolean startsWith\(String prefix\)
> align=`left`,textColor=`#333333`


####### Проверяет, что текущая строка начинается со строки prefix
> align=`left`,textColor=`#333333`


###### boolean endsWith\(String suffix\)
> align=`left`,textColor=`#333333`


####### Проверяет, что текущая строка заканчивается на строку suffix
> align=`left`,textColor=`#333333`


##### Перевод строки в число
> align=`left`,textColor=`#333333`


###### Double\.parseDouble\(\)
> align=`left`,textColor=`#333333`


###### Integer\.parseInt\(\)
> align=`left`,textColor=`#333333`


##### Перевод объекта/примитива в строку
> align=`left`,textColor=`#333333`


###### String\.valueOf\(\)
> align=`left`,textColor=`#333333`


###### перевода экземпляра любого Java\-класса
> align=`left`,textColor=`#333333`


####### =\> String
> align=`left`,textColor=`#333333`


##### Перевод строки в верхний/нижний регистр
> align=`left`,textColor=`#333333`


###### toLowerCase\(\)
> align=`left`,textColor=`#333333`


####### нижний регистр
> align=`left`,textColor=`#333333`


###### toUpperCase\(\)
> align=`left`,textColor=`#333333`


####### верхний регистр
> align=`left`,textColor=`#333333`


##### Разбиение строки на массив строк split\(\)
> align=`left`,textColor=`#333333`


###### Первый способ разбить строку на несколько частей
> align=`left`,textColor=`#333333`


###### Результатом будет массив
> align=`left`,textColor=`#333333`


####### String\[\] strings = str\.split\("\-\-\-"\);
> align=`left`,textColor=`#333333`


##### Перевод коллекции строк к строковому представлению
> align=`left`,textColor=`#333333`


###### String\.join\("; ", people\[масссив элементов\]\);
> align=`left`,textColor=`#333333`


###### String join\(CharSequence delimiter, elements\)
> align=`left`,textColor=`#333333`


###### Склеивает вместе несколько подстрок
> align=`left`,textColor=`#333333`


###### delimiter — разделитель элементов
> align=`left`,textColor=`#333333`


###### elements — массив строк / экземпляр коллекции строк
> align=`left`,textColor=`#333333`


#### Класс StringBuilder = Изменения строк
> align=`left`,textColor=`#333333`


##### Класс StringBuffer
> align=`left`,textColor=`#333333`


###### это аналог класса StringBuilder
> align=`left`,textColor=`#333333`


###### методы имеют модификатор synchronized
> align=`left`,textColor=`#333333`


###### одновременно обращаться из нескольких потоков\.
> align=`left`,textColor=`#333333`


##### Тип String, который можно менять с помощью StringBuilder
> align=`left`,textColor=`#333333`


##### Не создается новая подстрока в памяти при каждом вызове метода "изменения"
> align=`left`,textColor=`#333333`


##### Создать объект StringBuilder
> align=`left`,textColor=`#333333`


###### StringBuilder имя = new StringBuilder\(строка\);
> align=`left`,textColor=`#333333`


###### Создать пустую изменяемую строку =\>
> align=`left`,textColor=`#333333`


###### StringBuilder имя = new StringBuilder\(\);
> align=`left`,textColor=`#333333`


##### Список методов
> align=`left`,textColor=`#333333`


###### StringBuilder append\(obj\)
> align=`left`,textColor=`#333333`


####### Добавление к строке
> align=`left`,textColor=`#333333`


######## Преобразовывает переданный объект в строку и добавляет к текущей строке
> align=`left`,textColor=`#333333`


###### StringBuilder insert\(int index, obj\)
> align=`left`,textColor=`#333333`


####### Преобразовывает переданный объект в строку и вставляет в текущую строку
> align=`left`,textColor=`#333333`


###### StringBuilder replace\(int start, int end, String str\)
> align=`left`,textColor=`#333333`


####### Заменяет часть строки, заданную интервалом start\.\.end на переданную строку
> align=`left`,textColor=`#333333`


###### StringBuilder deleteCharAt\(int index\)
> align=`left`,textColor=`#333333`


####### Удаляет из строки символ под номером index
> align=`left`,textColor=`#333333`


###### StringBuilder delete\(int start, int end\)
> align=`left`,textColor=`#333333`


####### Удаляет из строки символы, заданные интервалом
> align=`left`,textColor=`#333333`


###### int indexOf\(String str, int index\)
> align=`left`,textColor=`#333333`


####### Ищет подстроку в текущей строке
> align=`left`,textColor=`#333333`


###### int lastIndexOf\(String str, int index\)
> align=`left`,textColor=`#333333`


####### Ищет подстроку в текущей строке с конца
> align=`left`,textColor=`#333333`


###### char charAt\(int index\)
> align=`left`,textColor=`#333333`


####### Возвращает символ строки по его индексу
> align=`left`,textColor=`#333333`


###### String substring\(int start, int end\)
> align=`left`,textColor=`#333333`


####### Возвращает подстроку, заданную интервалом
> align=`left`,textColor=`#333333`


###### StringBuilder reverse\(\)
> align=`left`,textColor=`#333333`


####### Разворачивает строку задом наперед\.
> align=`left`,textColor=`#333333`


###### void setCharAt\(int index, char\)
> align=`left`,textColor=`#333333`


####### Изменяет символ строки, заданный индексом на переданный
> align=`left`,textColor=`#333333`


###### int length\(\)
> align=`left`,textColor=`#333333`


####### Возвращает длину строки в символах
> align=`left`,textColor=`#333333`


###### toString\(\)
> align=`left`,textColor=`#333333`


####### Преобразование к стандартной строке
> align=`left`,textColor=`#333333`


### 11 уровень Объекты
> align=`left`,textColor=`#333333`


#### Объекты
> align=`left`,textColor=`#333333`


##### На основе классов — создаются объекты
> align=`left`,textColor=`#333333`


###### связь между классом и объектами этого класса
> align=`left`,textColor=`#333333`


##### пишем классы \(делаем чертежи\)
> align=`left`,textColor=`#333333`


###### на основе этих классов Java\-машина создает объекты
> align=`left`,textColor=`#333333`


##### Иерархия классов
> align=`left`,textColor=`#333333`


###### показывает связь между объектами
> align=`left`,textColor=`#333333`


#####  в Java все сущности являются объектами
> align=`left`,textColor=`#333333`


##### Объекты просто вызывают методы друг друга и передают в них нужные данные\.
> align=`left`,textColor=`#333333`


##### Статические переменные \- «существуют всегда» 
> align=`left`,textColor=`#333333`


##### Создание объекта
> align=`left`,textColor=`#333333`


###### Класс имя = new Класс\(параметры\)
> align=`left`,textColor=`#333333`


####### Класс имя — это создание новой переменной
> align=`left`,textColor=`#333333`


####### Код справа от знака равенства — это создание нового объекта типа Класс
> align=`left`,textColor=`#333333`


#### Конструктор
> align=`left`,textColor=`#333333`


##### Имя метода\-конструктора совпадает с именем его класса \(и начинается с большой буквы\)
> align=`left`,textColor=`#333333`


##### Метод\-конструктор не имеет типа возвращаемого результата\.
> align=`left`,textColor=`#333333`


##### Создание объекта класса Point, будет вызван конструктор класса\.
> align=`left`,textColor=`#333333`


##### Создание объекта JAVA
> align=`left`,textColor=`#333333`


###### Java\-машина создает объект типа Класс
> align=`left`,textColor=`#333333`


###### Java\-машина вызывает у объекта конструктор и передает туда ваши параметры
> align=`left`,textColor=`#333333`


##### Названия переменных берутся те же, что у полей класса, а конфликт имен решается с помощью ключевого слова this\.
> align=`left`,textColor=`#333333`


##### Никакого ограничения на количество конструкторов или их параметров нет\.
> align=`left`,textColor=`#333333`


##### Конструктор по умолчанию
> align=`left`,textColor=`#333333`


###### без параметров
> align=`left`,textColor=`#333333`


#### Порядок инициализации переменных
> align=`left`,textColor=`#333333`


##### Переменные класса сначала инициализируются своими значениями, а уже затем выполняется код конструкторов\.
> align=`left`,textColor=`#333333`


##### В четко заданном порядке — порядке объявления в классе\.
> align=`left`,textColor=`#333333`


##### Переменной age присваивается стартовое значение, затем значение из конструктора
> align=`left`,textColor=`#333333`


#####  переменные класса до того, как им присвоили какое\-либо значение, имеют значение по умолчанию int = 0
> align=`left`,textColor=`#333333`


#### Константы
> align=`left`,textColor=`#333333`


##### инициализации констант = модификатор final \+ стартовое значение
> align=`left`,textColor=`#333333`


##### стартовое значение можно сразу не присваивать, если присвоить его в конструкторе\.
> align=`left`,textColor=`#333333`


##### final переменной должно быть присвоено значение во всех конструкторах\.
> align=`left`,textColor=`#333333`


#### Код в конструкторе
> align=`left`,textColor=`#333333`


##### сериализация
> align=`left`,textColor=`#333333`


##### наследование
> align=`left`,textColor=`#333333`


###### Конструктор базового класса
> align=`left`,textColor=`#333333`


###### порядка инициализации переменных и вызова конструктора
> align=`left`,textColor=`#333333`


###### Наследование конструктора от родительского класса\. 
> align=`left`,textColor=`#333333`


###### Порядок выполнения инициализации\.
> align=`left`,textColor=`#333333`


###### Переменные класса инициализируются до вызова конструктора\. 
> align=`left`,textColor=`#333333`


###### 1\. Родительский класс 
> align=`left`,textColor=`#333333`


####### 2\. Класс наследник
> align=`left`,textColor=`#333333`


##### исключения 
> align=`left`,textColor=`#333333`


###### try\-catch можно писать только в методе
> align=`left`,textColor=`#333333`


##### Проверка, ограничения
> align=`left`,textColor=`#333333`


#### Свойства: getter и setter
> align=`left`,textColor=`#333333`


##### В JAVA все поля класса делать private\.
> align=`left`,textColor=`#333333`


##### Только методы класса могут менять переменные класса
> align=`left`,textColor=`#333333`


## Java
> align=`left`


### Уровень Стажер
> align=`left`,textColor=`#333333`


#### Коллекции Lite
> align=`left`,textColor=`#333333`


##### Collections Framework
> align=`left`,textColor=`#333333`


##### Коллекции List, Set, Map
> align=`left`,textColor=`#333333`


##### ArrayList
> align=`left`,textColor=`#333333`


##### Сортировка
> align=`left`,textColor=`#333333`


##### Обобщения
> align=`left`,textColor=`#333333`


##### Итераторы
> align=`left`,textColor=`#333333`


#### Инструменты
> align=`left`,textColor=`#333333`


##### Maven
> align=`left`,textColor=`#333333`


##### jUnit
> align=`left`,textColor=`#333333`


##### Git
> align=`left`,textColor=`#333333`


##### IntelliJ Idea
> align=`left`,textColor=`#333333`


##### Сheckstyle, JaCoCo
> align=`left`,textColor=`#333333`


##### Travic CI
> align=`left`,textColor=`#333333`


#### ООП
> align=`left`,textColor=`#333333`


##### Наследование
> align=`left`,textColor=`#333333`


##### Инкапсуляция
> align=`left`,textColor=`#333333`


##### Полиморфизм
> align=`left`,textColor=`#333333`


##### Внутренние класы
> align=`left`,textColor=`#333333`


##### Абстрактные классы
> align=`left`,textColor=`#333333`


##### Исключения
> align=`left`,textColor=`#333333`


#### Синтаксис языка
> align=`left`,textColor=`#333333`


##### JVM
> align=`left`,textColor=`#333333`


##### Типы данных
> align=`left`,textColor=`#333333`


##### Операторы условия
> align=`left`,textColor=`#333333`


##### Циклы
> align=`left`,textColor=`#333333`


##### Массивы
> align=`left`,textColor=`#333333`


#### Шаблоны проектирования
> align=`left`,textColor=`#333333`


##### Синглетон
> align=`left`,textColor=`#333333`


##### Декоратор
> align=`left`,textColor=`#333333`


##### Стратегия
> align=`left`,textColor=`#333333`


##### Фабрика
> align=`left`,textColor=`#333333`


#### Функциональное П\.
> align=`left`,textColor=`#333333`


##### Lambda
> align=`left`,textColor=`#333333`


##### Stream API
> align=`left`,textColor=`#333333`


### Уровень Junior
> align=`left`,textColor=`#333333`


#### Коллекции Pro
> align=`left`,textColor=`#333333`


##### Параметризованные типы, Wildcard
> align=`left`,textColor=`#333333`


##### Итераторы
> align=`left`,textColor=`#333333`


##### Внутреннее устройство:
> align=`left`,textColor=`#333333`


##### Коллекции List
> align=`left`,textColor=`#333333`


##### Коллекции Stack, Queue
> align=`left`,textColor=`#333333`


##### Коллекции Set
> align=`left`,textColor=`#333333`


##### Коллекции Map
> align=`left`,textColor=`#333333`


##### Структуры Tree
> align=`left`,textColor=`#333333`


##### Hashcode, equals
> align=`left`,textColor=`#333333`


#### ООД
> align=`left`,textColor=`#333333`


##### Принципы SOLID
> align=`left`,textColor=`#333333`


##### Разработка через тестирование \(TDD\)
> align=`left`,textColor=`#333333`


#### Память
> align=`left`,textColor=`#333333`


##### Cборщик мусора
> align=`left`,textColor=`#333333`


##### Типы сборщиков
> align=`left`,textColor=`#333333`


##### Профилирование приложений
> align=`left`,textColor=`#333333`


##### Soft weak ссылки и коллекции
> align=`left`,textColor=`#333333`


#### Ввод\-вывод, Socket
> align=`left`,textColor=`#333333`


##### InputStreams, OutputStreams
> align=`left`,textColor=`#333333`


##### Readers, Writers
> align=`left`,textColor=`#333333`


##### Scanner
> align=`left`,textColor=`#333333`


##### Файловые менеджеры
> align=`left`,textColor=`#333333`


##### Сокеты
> align=`left`,textColor=`#333333`


##### Внешняя сортировка файлов
> align=`left`,textColor=`#333333`


#### SQl, JDBC
> align=`left`,textColor=`#333333`


##### Общие сведения о базах данных на основе PostgreSQL
> align=`left`,textColor=`#333333`


##### Базовый синтаксис SQL
> align=`left`,textColor=`#333333`


##### Запросы Select, Join, Outer Left, Right
> align=`left`,textColor=`#333333`


##### JDBC
> align=`left`,textColor=`#333333`


##### Индексирование, внешние ключи, естественные ключи
> align=`left`,textColor=`#333333`


### Уровень Middle
> align=`left`,textColor=`#333333`


#### Многопоточность
> align=`left`,textColor=`#333333`


##### Синхронные и асинхронные операции
> align=`left`,textColor=`#333333`


##### Синхронизация ресурсов
> align=`left`,textColor=`#333333`


##### JMM
> align=`left`,textColor=`#333333`


##### Низкоуровневые блокировки
> align=`left`,textColor=`#333333`


##### Неблокирующие алгоритмы
> align=`left`,textColor=`#333333`


##### Потокобезопасные коллекции
> align=`left`,textColor=`#333333`


#### Клиент\-серверное приложение
> align=`left`,textColor=`#333333`


##### Общая схема клиент\-серверного приложения
> align=`left`,textColor=`#333333`


##### Протоколы HTTP и HTTPS
> align=`left`,textColor=`#333333`


##### Servlet
> align=`left`,textColor=`#333333`


##### JSP, MVC, JSLT
> align=`left`,textColor=`#333333`


##### Filter, Session, Auth
> align=`left`,textColor=`#333333`


##### Клиентские языки HTML, JS, CSS
> align=`left`,textColor=`#333333`


##### Тестирование Mockito
> align=`left`,textColor=`#333333`


#### Hibernate
> align=`left`,textColor=`#333333`


##### Базовые понятия ORM\. Hibernate
> align=`left`,textColor=`#333333`


##### Конфигурирование Hibernate
> align=`left`,textColor=`#333333`


##### Связь модельных представлений с объектами
> align=`left`,textColor=`#333333`


##### Язык запросов HQL
> align=`left`,textColor=`#333333`


##### Интеграционное тестирование
> align=`left`,textColor=`#333333`


#### Spring
> align=`left`,textColor=`#333333`


##### Spring IoC
> align=`left`,textColor=`#333333`


##### Spring HibernateTemplate
> align=`left`,textColor=`#333333`


##### Spring Data
> align=`left`,textColor=`#333333`


##### Spring MVC
> align=`left`,textColor=`#333333`


##### Spring Security
> align=`left`,textColor=`#333333`


##### Spring Test
> align=`left`,textColor=`#333333`


##### Spring Boot
> align=`left`,textColor=`#333333`


##### Spring Web Service
> align=`left`,textColor=`#333333`


##### Spring JMS
> align=`left`,textColor=`#333333`


#### Микросервисы
> align=`left`,textColor=`#333333`


##### Микросервисы VS монолитные приложения
> align=`left`,textColor=`#333333`


##### Spring boot
> align=`left`,textColor=`#333333`


##### RestTemplate
> align=`left`,textColor=`#333333`


##### Docker
> align=`left`,textColor=`#333333`


##### Kafka
> align=`left`,textColor=`#333333`


##### Kubernetes
> align=`left`,textColor=`#333333`


### МОДУЛЬ 1\. Java Syntax
> align=`left`,textColor=`#333333`


#### 1\. Вводное занятие\. Команды и первая программа на Java
> align=`left`,textColor=`#333333`


##### о java преимуществах, области применения
> align=`left`,textColor=`#333333`


##### о JavaRush и Java\-университете
> align=`left`,textColor=`#333333`


##### структура программы, метод main
> align=`left`,textColor=`#333333`


##### sout
> align=`left`,textColor=`#333333`


##### рассказ о сайте и WebIDE
> align=`left`,textColor=`#333333`


#### 2\. Работа с переменными, типа int и String
> align=`left`,textColor=`#333333`


##### сохранение текста в переменную, ее вывод в консоль
> align=`left`,textColor=`#333333`


##### объявление и инициализация переменных String
> align=`left`,textColor=`#333333`


##### комментарии в коде
> align=`left`,textColor=`#333333`


##### элементарные математические операции с переменными типа int
> align=`left`,textColor=`#333333`


##### инкремент, декремент
> align=`left`,textColor=`#333333`


##### конкатенация
> align=`left`,textColor=`#333333`


##### Integer\.parseInt\(\), String\.valueOf\(\)
> align=`left`,textColor=`#333333`


#### 3\. Знакомство с типами и ввод с клавиатуры\. Знакомство с IDEA
> align=`left`,textColor=`#333333`


##### хранение примитивных переменных в памяти
> align=`left`,textColor=`#333333`


##### хранения String переменных в памяти
> align=`left`,textColor=`#333333`


##### byte, short, char, long, float, double
> align=`left`,textColor=`#333333`


##### System\.in, Scanner
> align=`left`,textColor=`#333333`


##### методы Scanner
> align=`left`,textColor=`#333333`


##### установка IDEA, скачивание проекта, скачивание JDK \(версия 11\)
> align=`left`,textColor=`#333333`


##### установка плагина, рассказ о его функционале
> align=`left`,textColor=`#333333`


#### 4\. Условный оператор
> align=`left`,textColor=`#333333`


##### if, if\-else, if\-else\-if
> align=`left`,textColor=`#333333`


##### блоки команд
> align=`left`,textColor=`#333333`


##### вложенные блоки команд \(вложенные if\-ы\)
> align=`left`,textColor=`#333333`


##### Тип boolean
> align=`left`,textColor=`#333333`


##### операторы сравнения, в т\.ч\. double
> align=`left`,textColor=`#333333`


##### логические И, ИЛИ, НЕ
> align=`left`,textColor=`#333333`


##### тернарний оператор
> align=`left`,textColor=`#333333`


##### сравнение примитивов и String
> align=`left`,textColor=`#333333`


#### 5\. Факультатив
> align=`left`,textColor=`#333333`


##### Подтягиваем новичков
> align=`left`,textColor=`#333333`


##### Опытным рассказываем про фишки IDEA и т\.п\.
> align=`left`,textColor=`#333333`


##### компиляция класса в байт\-код из консоли, запуск программы
> align=`left`,textColor=`#333333`


#### 6\. Циклы
> align=`left`,textColor=`#333333`


##### проблематика на примере задачи сделать что\-то много раз
> align=`left`,textColor=`#333333`


##### while
> align=`left`,textColor=`#333333`


##### break, continue
> align=`left`,textColor=`#333333`


##### for
> align=`left`,textColor=`#333333`


##### do\-while
> align=`left`,textColor=`#333333`


##### сравнение разных циклов, выявление где какой лучше использовать
> align=`left`,textColor=`#333333`


#### 7\. Массивы
> align=`left`,textColor=`#333333`


##### создание и заполнение массивов
> align=`left`,textColor=`#333333`


##### обход массива
> align=`left`,textColor=`#333333`


##### хранение массивов в памяти
> align=`left`,textColor=`#333333`


#### 8\. Двумерные массивы
> align=`left`,textColor=`#333333`


##### двумерные массивы
> align=`left`,textColor=`#333333`


##### зубчатые массивы
> align=`left`,textColor=`#333333`


##### n\-мерные массивы
> align=`left`,textColor=`#333333`


#### 9\. Функции
> align=`left`,textColor=`#333333`


##### объявление и вызов методов
> align=`left`,textColor=`#333333`


##### параметры
> align=`left`,textColor=`#333333`


##### возвращаемое значение, void
> align=`left`,textColor=`#333333`


##### модификаторы доступа
> align=`left`,textColor=`#333333`


##### локальные переменные метода
> align=`left`,textColor=`#333333`


##### модификаторы методов, метод main
> align=`left`,textColor=`#333333`


#### 10\. Работа со строками и продолжение предыдущей темы
> align=`left`,textColor=`#333333`


##### константы
> align=`left`,textColor=`#333333`


##### сокрытие переменных \(shadowing\)
> align=`left`,textColor=`#333333`


##### экранирование символов
> align=`left`,textColor=`#333333`


##### основные методы класса String
> align=`left`,textColor=`#333333`


#### 11\. Факультатив
> align=`left`,textColor=`#333333`


##### литералы
> align=`left`,textColor=`#333333`


##### кодировки
> align=`left`,textColor=`#333333`


##### вспомогательные классы для работы со строками: StringBuilder, String\.format
> align=`left`,textColor=`#333333`


##### утилитный класс Arrays
> align=`left`,textColor=`#333333`


#### 12\. Типы данных\. Знакомство с ООП
> align=`left`,textColor=`#333333`


##### примитивные типы
> align=`left`,textColor=`#333333`


##### приведение типов данных
> align=`left`,textColor=`#333333`


##### ссылочные типы
> align=`left`,textColor=`#333333`


##### объекты
> align=`left`,textColor=`#333333`


##### null
> align=`left`,textColor=`#333333`


##### знакомство с ООП
> align=`left`,textColor=`#333333`


##### наследование
> align=`left`,textColor=`#333333`


#### 13\. Объекты
> align=`left`,textColor=`#333333`


##### создание объектов \(new\)
> align=`left`,textColor=`#333333`


##### конструктор, конструктор по умолчанию
> align=`left`,textColor=`#333333`


##### конструктор с параметрами
> align=`left`,textColor=`#333333`


##### порядок вызова конструкторов при наследовании
> align=`left`,textColor=`#333333`


##### доступ к полям объекта \(геттер, сеттер\)
> align=`left`,textColor=`#333333`


##### hashCode, equals
> align=`left`,textColor=`#333333`


#### 14\. Классы и static
> align=`left`,textColor=`#333333`


#### статические переменные
> align=`left`,textColor=`#333333`


#### сравнение статических и нестатических переменных
> align=`left`,textColor=`#333333`


#### статические методы
> align=`left`,textColor=`#333333`


#### порядок инициализации при использовании конструкторов и статических блоков
> align=`left`,textColor=`#333333`


#### внутренние классы
> align=`left`,textColor=`#333333`


#### 15\. Факультатив
> align=`left`,textColor=`#333333`


#### жизненный цикл объекта
> align=`left`,textColor=`#333333`


#### загрузка класса
> align=`left`,textColor=`#333333`


#### 16\. Списки и Generics
> align=`left`,textColor=`#333333`


#### классы обертки
> align=`left`,textColor=`#333333`


#### ArrayList
> align=`left`,textColor=`#333333`


#### Array VS ArrayList
> align=`left`,textColor=`#333333`


#### типизация ArrayList \(дженерики\)
> align=`left`,textColor=`#333333`


#### 17\. Коллекции
> align=`left`,textColor=`#333333`


#### иерархия коллекций
> align=`left`,textColor=`#333333`


#### Set, HashSet
> align=`left`,textColor=`#333333`


#### iterator, for\-each
> align=`left`,textColor=`#333333`


#### 18\. Коллекции
> align=`left`,textColor=`#333333`


#### Map, HashMap
> align=`left`,textColor=`#333333`


#### для каких задач лучше использовать какие коллекции
> align=`left`,textColor=`#333333`


#### Collections
> align=`left`,textColor=`#333333`


#### 19\. Факультатив
> align=`left`,textColor=`#333333`


#### LinkedList
> align=`left`,textColor=`#333333`


#### ArrayList VS LinkedList
> align=`left`,textColor=`#333333`


#### Queue
> align=`left`,textColor=`#333333`


#### SortedMap, TreeMap
> align=`left`,textColor=`#333333`


#### 20\. Singleton, Enum, switch
> align=`left`,textColor=`#333333`


#### зачем нужны перечисления
> align=`left`,textColor=`#333333`


#### объявления Enum
> align=`left`,textColor=`#333333`


#### Enum \- лучший синглтон
> align=`left`,textColor=`#333333`


#### switch
> align=`left`,textColor=`#333333`


#### 21\. Исключения
> align=`left`,textColor=`#333333`


#### нормальное выполнение кода и ошибки в рантайме
> align=`left`,textColor=`#333333`


#### try\-catch
> align=`left`,textColor=`#333333`


#### иерархия исключений
> align=`left`,textColor=`#333333`


#### multicatch
> align=`left`,textColor=`#333333`


#### throw
> align=`left`,textColor=`#333333`


#### checked и unchecked исключения
> align=`left`,textColor=`#333333`


#### throws
> align=`left`,textColor=`#333333`


#### 22\. Исключения
> align=`left`,textColor=`#333333`


#### finally
> align=`left`,textColor=`#333333`


#### создание своих исключений
> align=`left`,textColor=`#333333`


#### Throwable
> align=`left`,textColor=`#333333`


#### stack trace
> align=`left`,textColor=`#333333`


#### try with resources
> align=`left`,textColor=`#333333`


#### AutoCloseable
> align=`left`,textColor=`#333333`


#### 23\. Факультатив
> align=`left`,textColor=`#333333`


#### Оборачивание исключения
> align=`left`,textColor=`#333333`


#### Error
> align=`left`,textColor=`#333333`


#### 24\. Потоки ввода\-вывода
> align=`left`,textColor=`#333333`


#### InputStream
> align=`left`,textColor=`#333333`


#### Reader
> align=`left`,textColor=`#333333`


#### BufferedReader
> align=`left`,textColor=`#333333`


#### OutputStream
> align=`left`,textColor=`#333333`


#### Writer
> align=`left`,textColor=`#333333`


#### BufferedWriter
> align=`left`,textColor=`#333333`


#### 25\. Потоки ввода\-вывода\. Pattern Decorator
> align=`left`,textColor=`#333333`


#### ByteArrayInputStream
> align=`left`,textColor=`#333333`


#### ByteArrayOutputStream
> align=`left`,textColor=`#333333`


#### комбинирование потоков
> align=`left`,textColor=`#333333`


#### 26\. Потоки ввода\-вывода\. java\.nio
> align=`left`,textColor=`#333333`


#### io VS nio
> align=`left`,textColor=`#333333`


#### FileChannel
> align=`left`,textColor=`#333333`


#### Selector
> align=`left`,textColor=`#333333`


#### Path
> align=`left`,textColor=`#333333`


#### Paths
> align=`left`,textColor=`#333333`


#### Files
> align=`left`,textColor=`#333333`


#### 27\. Работа со временем и датой
> align=`left`,textColor=`#333333`


#### Date
> align=`left`,textColor=`#333333`


#### DateFormat
> align=`left`,textColor=`#333333`


#### Calendar
> align=`left`,textColor=`#333333`


#### LocalDate, LocalTime, LocalDateTime
> align=`left`,textColor=`#333333`


#### Instant
> align=`left`,textColor=`#333333`


#### ZonedDateTime
> align=`left`,textColor=`#333333`


#### DateTimeFormatter
> align=`left`,textColor=`#333333`


#### 28\. Git\. Итоговый проект\. \(Крипто\-анализатор\)
> align=`left`,textColor=`#333333`


### МОДУЛЬ 2\. Java Core
> align=`left`,textColor=`#333333`


#### 1\. ООП: инкапсуляция, полиморфизм\. Интерфейсы
> align=`left`,textColor=`#333333`


#### инкапсуляция
> align=`left`,textColor=`#333333`


#### полиморфизм
> align=`left`,textColor=`#333333`


#### приведение типов
> align=`left`,textColor=`#333333`


#### this, super
> align=`left`,textColor=`#333333`


#### интерфейсы
> align=`left`,textColor=`#333333`


#### 2\. ООП: Перегрузка, переопределение, Абстрактные классы
> align=`left`,textColor=`#333333`


#### абстрактный класс
> align=`left`,textColor=`#333333`


#### реализация абстрактных методов предка
> align=`left`,textColor=`#333333`


#### перегрузка \(overload\) методов \- одинаковые названия
> align=`left`,textColor=`#333333`


#### переопределение \(override\) методов
> align=`left`,textColor=`#333333`


#### 3\. Stream API
> align=`left`,textColor=`#333333`


#### анонимный внутренний класс
> align=`left`,textColor=`#333333`


#### реализация абстрактных методов предка
> align=`left`,textColor=`#333333`


#### лямбда выражения
> align=`left`,textColor=`#333333`


#### функциональные интерфейсы
> align=`left`,textColor=`#333333`


#### method reference
> align=`left`,textColor=`#333333`


#### Stream
> align=`left`,textColor=`#333333`


#### промежуточные и терминальные методы Stream\-а
> align=`left`,textColor=`#333333`


#### map\-reduce
> align=`left`,textColor=`#333333`


#### 4\. ООП: композиция, агрегация, наследование
> align=`left`,textColor=`#333333`


#### ассоциация: композиция и агрегация
> align=`left`,textColor=`#333333`


#### наследование
> align=`left`,textColor=`#333333`


#### 5\. Интерфейсы: сравнение с абстрактным классом, множественное наследование
> align=`left`,textColor=`#333333`


#### объявление поведения
> align=`left`,textColor=`#333333`


#### дефолтные методы
> align=`left`,textColor=`#333333`


#### реализация нескольких интерфейсов
> align=`left`,textColor=`#333333`


#### проблема “ромба”
> align=`left`,textColor=`#333333`


#### сравнение абстрактных классов и интерфейсов
> align=`left`,textColor=`#333333`


#### 6\. Приведение типов, instanceof switch\-expression
> align=`left`,textColor=`#333333`


#### instanceof
> align=`left`,textColor=`#333333`


#### приведение типов \(расширение и сужение\)
> align=`left`,textColor=`#333333`


#### switch\-expression, Enum
> align=`left`,textColor=`#333333`


#### 7\. Особенности вызова конструкторов\. Блок static
> align=`left`,textColor=`#333333`


#### процесс создание объекта
> align=`left`,textColor=`#333333`


#### порядок вызова конструкторов
> align=`left`,textColor=`#333333`


#### порядок инициализации переменных
> align=`left`,textColor=`#333333`


#### 8\. Устройство Object: equals, hashCode, clone, toString\(\)\. Immutable objects
> align=`left`,textColor=`#333333`


#### класс Object
> align=`left`,textColor=`#333333`


#### методы класса Object
> align=`left`,textColor=`#333333`


#### mutable & immutable objects
> align=`left`,textColor=`#333333`


#### 9\. Рекурсия
> align=`left`,textColor=`#333333`


#### рекурсия
> align=`left`,textColor=`#333333`


#### 10\. Знакомство с нитями: Thread, Runnable, start, sleep
> align=`left`,textColor=`#333333`


#### Thread
> align=`left`,textColor=`#333333`


#### Runnable
> align=`left`,textColor=`#333333`


#### start
> align=`left`,textColor=`#333333`


#### sleep
> align=`left`,textColor=`#333333`


#### interrupt
> align=`left`,textColor=`#333333`


#### 11\. Знакомство с нитями: synchronized, volatile, wait, notify\.DeadLock
> align=`left`,textColor=`#333333`


#### synchronized
> align=`left`,textColor=`#333333`


#### volatile
> align=`left`,textColor=`#333333`


#### join
> align=`left`,textColor=`#333333`


#### wait, notify
> align=`left`,textColor=`#333333`


#### проблема DeadLock
> align=`left`,textColor=`#333333`


#### 12\. Executors
> align=`left`,textColor=`#333333`


#### ExecutorService
> align=`left`,textColor=`#333333`


#### паттерн “фабричный метод”
> align=`left`,textColor=`#333333`


#### добавление задач в сервис
> align=`left`,textColor=`#333333`


#### Callable
> align=`left`,textColor=`#333333`


#### получение результата: Future
> align=`left`,textColor=`#333333`


#### остановка ExecutorService
> align=`left`,textColor=`#333333`


#### FixedThreadPool
> align=`left`,textColor=`#333333`


#### CachedThreadPool
> align=`left`,textColor=`#333333`


#### ScheduledExecutorService
> align=`left`,textColor=`#333333`


#### 13\. ThreadLocal, Callable, Future
> align=`left`,textColor=`#333333`


#### ThreadLocal контекст
> align=`left`,textColor=`#333333`


#### ThreadLocalRandom
> align=`left`,textColor=`#333333`


#### 14\. Внутренние/Вложенные классы, примеры: Map\.Entry
> align=`left`,textColor=`#333333`


#### вложенные классы
> align=`left`,textColor=`#333333`


#### внутренние классы
> align=`left`,textColor=`#333333`


#### внутренние статические классы
> align=`left`,textColor=`#333333`


#### внутренние анонимные классы
> align=`left`,textColor=`#333333`


#### примеры разных типов классов из JDK
> align=`left`,textColor=`#333333`


#### 15\. Сериализация JSON/XML/YAML
> align=`left`,textColor=`#333333`


#### java сериализация
> align=`left`,textColor=`#333333`


#### форматы данных xml, json, yaml
> align=`left`,textColor=`#333333`


#### jackson ObjectMapper
> align=`left`,textColor=`#333333`


#### 16\. Reflection API
> align=`left`,textColor=`#333333`


#### зачем нужен Reflection API
> align=`left`,textColor=`#333333`


#### получение данных: класса, метода, конструктора, поля
> align=`left`,textColor=`#333333`


#### создание объекта
> align=`left`,textColor=`#333333`


#### изменение внутреннего состояния объекта
> align=`left`,textColor=`#333333`


#### прокси
> align=`left`,textColor=`#333333`


#### RMI
> align=`left`,textColor=`#333333`


#### 17\. Аннотации в Java
> align=`left`,textColor=`#333333`


#### декларативный и императивный подход написания кода
> align=`left`,textColor=`#333333`


#### популярные аннотации: @Deprecated, @Override, @Nullable,\.\.\.
> align=`left`,textColor=`#333333`


#### создание аннотаций
> align=`left`,textColor=`#333333`


#### обработка аннотаций в рантайме
> align=`left`,textColor=`#333333`


#### 18\. Факультатив
> align=`left`,textColor=`#333333`


#### работа с Swing
> align=`left`,textColor=`#333333`


#### 19\. Sockets
> align=`left`,textColor=`#333333`


#### Socket
> align=`left`,textColor=`#333333`


#### ServerSocket
> align=`left`,textColor=`#333333`


#### live coding: написание примитивного чата для группы
> align=`left`,textColor=`#333333`


#### 20\. Итоговый проект
> align=`left`,textColor=`#333333`


### МОДУЛЬ 3\. Java professional
> align=`left`,textColor=`#333333`


#### 1\. Сборка мусора и типы ссылок в Java
> align=`left`,textColor=`#333333`


#### память JVM: stack и heap
> align=`left`,textColor=`#333333`


#### CG: Serial, Parallel, CMS, G1, Shenandoah, ZGC
> align=`left`,textColor=`#333333`


#### кеш
> align=`left`,textColor=`#333333`


#### WeakReference, SoftReference, PhantomReference
> align=`left`,textColor=`#333333`


#### 2\. Паттерны проектирования
> align=`left`,textColor=`#333333`


#### поведенческие: цепочка ответственности, команда, итератор, интерпретатор, посредник, хранитель, наблюдатель, состояние, стратегия, посетитель, шаблонный метод
> align=`left`,textColor=`#333333`


#### порождающие: прототип, строитель, синглтон, абстрактная фабрика, фабричный метод
> align=`left`,textColor=`#333333`


#### декоратор, компоновщик, фасад, приспособленец, прокси
> align=`left`,textColor=`#333333`


#### 3\. Методологии разработки
> align=`left`,textColor=`#333333`


#### waterfall
> align=`left`,textColor=`#333333`


#### v\-model
> align=`left`,textColor=`#333333`


#### incremental
> align=`left`,textColor=`#333333`


#### RAD model
> align=`left`,textColor=`#333333`


#### agile
> align=`left`,textColor=`#333333`


#### iterative
> align=`left`,textColor=`#333333`


#### spiral
> align=`left`,textColor=`#333333`


#### 4\. Основы Maven\. Установка Maven, управление зависимостями, виды Maven\-репозиториев, сборка Java\-проекта
> align=`left`,textColor=`#333333`


#### скачивание, прописывание переменных окружения
> align=`left`,textColor=`#333333`


#### создание maven\-проекта
> align=`left`,textColor=`#333333`


#### зависимости
> align=`left`,textColor=`#333333`


#### плагины
> align=`left`,textColor=`#333333`


#### фазы \(lifecycle\)
> align=`left`,textColor=`#333333`


#### профили
> align=`left`,textColor=`#333333`


#### билд артефактов
> align=`left`,textColor=`#333333`


#### 5\. Опыт работы с Guava, Apache Commons Collections
> align=`left`,textColor=`#333333`


#### Multimap, BiMap
> align=`left`,textColor=`#333333`


#### Multiset
> align=`left`,textColor=`#333333`


#### неизменяемые коллекции
> align=`left`,textColor=`#333333`


#### Objects: hashCode, equals
> align=`left`,textColor=`#333333`


#### Throwables
> align=`left`,textColor=`#333333`


#### CollectionUtils
> align=`left`,textColor=`#333333`


#### StringUtils
> align=`left`,textColor=`#333333`


#### 6\. JUnit
> align=`left`,textColor=`#333333`


#### зачем нужно тестирование
> align=`left`,textColor=`#333333`


#### типы тестирования
> align=`left`,textColor=`#333333`


#### @Test
> align=`left`,textColor=`#333333`


#### @Before, @After
> align=`left`,textColor=`#333333`


#### @BeforeClass, @AfterClass
> align=`left`,textColor=`#333333`


#### параметризованные тесты
> align=`left`,textColor=`#333333`


#### 7\. Mockito
> align=`left`,textColor=`#333333`


#### моки
> align=`left`,textColor=`#333333`


#### mock и spy
> align=`left`,textColor=`#333333`


#### when и thenReturn
> align=`left`,textColor=`#333333`


#### verify
> align=`left`,textColor=`#333333`


#### any, once, times
> align=`left`,textColor=`#333333`


#### 8\. Логирование
> align=`left`,textColor=`#333333`


#### зачем нужны логи
> align=`left`,textColor=`#333333`


#### уровни логирования
> align=`left`,textColor=`#333333`


#### slf4j
> align=`left`,textColor=`#333333`


#### реализации: log4j, JUL, logback, common\-loggins
> align=`left`,textColor=`#333333`


#### аппендеры
> align=`left`,textColor=`#333333`


#### 9\. Устройство сети\. Сетевая модель
> align=`left`,textColor=`#333333`


#### топология сети
> align=`left`,textColor=`#333333`


#### модель OSI
> align=`left`,textColor=`#333333`


#### DNS
> align=`left`,textColor=`#333333`


#### 10\. Архитектура ПО\. Клиент\-серверная архитектура и ее составляющие, трехуровневая архитектура, архитектурные шаблоны
> align=`left`,textColor=`#333333`


#### клиент\-серверная архитектура
> align=`left`,textColor=`#333333`


#### трехуровневая архитектура \(клиент\-сервер\-БД\)
> align=`left`,textColor=`#333333`


#### критерии хорошей архитектуры: эффективность, гибкость, расширяемость, масштабируемость, удобство тестирования, читаемый и понятный код
> align=`left`,textColor=`#333333`


#### модульная архитектура\. декомпозиция
> align=`left`,textColor=`#333333`


#### 11\. Протоколы HTTP/HTTPS\. Протокол передачи данных, HTTP\-запросы и ответы, отличия HTTP и HTTPS\. Cookies, Session
> align=`left`,textColor=`#333333`


#### протоколы передачи данных в сети
> align=`left`,textColor=`#333333`


#### http методы \(GET, POST, PUT, …\)
> align=`left`,textColor=`#333333`


#### параметры запросов
> align=`left`,textColor=`#333333`


#### тело запроса
> align=`left`,textColor=`#333333`


#### хедеры
> align=`left`,textColor=`#333333`


#### коды ответов
> align=`left`,textColor=`#333333`


#### http VS https
> align=`left`,textColor=`#333333`


#### http сессии
> align=`left`,textColor=`#333333`


#### куки
> align=`left`,textColor=`#333333`


#### http/2
> align=`left`,textColor=`#333333`


#### 12\. HttpClient
> align=`left`,textColor=`#333333`


#### AJAX
> align=`left`,textColor=`#333333`


#### java http client
> align=`left`,textColor=`#333333`


#### синхронные и асинхронные запросы
> align=`left`,textColor=`#333333`


#### задача на получение данных с нета, например погода
> align=`left`,textColor=`#333333`


#### 13\. Сервлеты, Java servlet API\. Пишем простое веб\-приложение
> align=`left`,textColor=`#333333`


#### что такое сервлет
> align=`left`,textColor=`#333333`


#### жизненный цикл
> align=`left`,textColor=`#333333`


#### сервлет\-контейнер Tomcat
> align=`left`,textColor=`#333333`


#### doGet, doPost
> align=`left`,textColor=`#333333`


#### redirect VS forward
> align=`left`,textColor=`#333333`


#### фильтры
> align=`left`,textColor=`#333333`


#### 14\. Контейнеры сервлетов: Tomcat, развертывание приложения, настройка сервера
> align=`left`,textColor=`#333333`


#### практика по предыдущей лекции
> align=`left`,textColor=`#333333`


#### 15\. Знакомство с MVC \(Model\-View\-Controller\)\. JSP
> align=`left`,textColor=`#333333`


#### набор архитектурных принципов и идей MVC
> align=`left`,textColor=`#333333`


#### схемы MVC
> align=`left`,textColor=`#333333`


#### MVC в вебе
> align=`left`,textColor=`#333333`


#### типичная ошибка: бизнес\-логика в контроллере
> align=`left`,textColor=`#333333`


#### MVC на примере задачи
> align=`left`,textColor=`#333333`


#### JSP
> align=`left`,textColor=`#333333`


#### 16\. Веб\-сервисы
> align=`left`,textColor=`#333333`


#### что такое веб\-сервис
> align=`left`,textColor=`#333333`


#### протоколы http, jms, ftp,\.\.\.
> align=`left`,textColor=`#333333`


#### синхронные и асинхронные запросы
> align=`left`,textColor=`#333333`


#### облачные сервисы: IaaS, PaaS, SaaS \(что угодно as a service\)
> align=`left`,textColor=`#333333`


#### 17\. HTML\-факультатив
> align=`left`,textColor=`#333333`


#### что такое HTML
> align=`left`,textColor=`#333333`


#### структура HTML документа
> align=`left`,textColor=`#333333`


#### теги и их атрибуты
> align=`left`,textColor=`#333333`


#### CSS, его синтаксис
> align=`left`,textColor=`#333333`


#### классы и идентификаторы
> align=`left`,textColor=`#333333`


#### селекторы
> align=`left`,textColor=`#333333`


#### 18\. Итоговый проект\. Servlet\-quest конкурс
> align=`left`,textColor=`#333333`


#### Написать на сервлетах текстовую пошаговую игру\-квест
> align=`left`,textColor=`#333333`


### МОДУЛЬ 4\. Работа с базами данных\. Hibernate\.
> align=`left`,textColor=`#333333`


#### 1\. Введение в базы данных\. Установка СУБД \(MySQL\)\. ddl, dml
> align=`left`,textColor=`#333333`


#### зачем нужны БД
> align=`left`,textColor=`#333333`


#### реляционные и нереляционные БД
> align=`left`,textColor=`#333333`


#### реляционная модель
> align=`left`,textColor=`#333333`


#### CAP теорема
> align=`left`,textColor=`#333333`


#### установка MySQL developer
> align=`left`,textColor=`#333333`


#### группы SQL \(ddl, dml, dcl, tcl\)
> align=`left`,textColor=`#333333`


#### 2\. Типы данных\. Создание таблицы\. Написание insert, select, update, delete
> align=`left`,textColor=`#333333`


#### создание схемы
> align=`left`,textColor=`#333333`


#### создание таблиц
> align=`left`,textColor=`#333333`


#### изменение структуры таблиц
> align=`left`,textColor=`#333333`


#### insert
> align=`left`,textColor=`#333333`


#### select
> align=`left`,textColor=`#333333`


#### update
> align=`left`,textColor=`#333333`


#### delete
> align=`left`,textColor=`#333333`


#### 3\. Выбор данных
> align=`left`,textColor=`#333333`


#### select с условием
> align=`left`,textColor=`#333333`


#### перечень выбираемых данных
> align=`left`,textColor=`#333333`


#### subselect
> align=`left`,textColor=`#333333`


#### join: left, right, inner, cross
> align=`left`,textColor=`#333333`


#### group by и агрегатные функции
> align=`left`,textColor=`#333333`


#### index
> align=`left`,textColor=`#333333`


#### 4\. Транзакции БД
> align=`left`,textColor=`#333333`


#### концепции ACID \(Atomicity, Consistency, Isolation, Durability\)
> align=`left`,textColor=`#333333`


#### управление транзакциями
> align=`left`,textColor=`#333333`


#### уровни изоляции данных
> align=`left`,textColor=`#333333`


#### 5\. Проектирование баз данных
> align=`left`,textColor=`#333333`


#### первая нормальная форма
> align=`left`,textColor=`#333333`


#### вторая нормальная форма
> align=`left`,textColor=`#333333`


#### третья нормальная форма
> align=`left`,textColor=`#333333`


#### ключи \(foreign key\)
> align=`left`,textColor=`#333333`


#### отношения: one to …, many to\.\.\.
> align=`left`,textColor=`#333333`


#### 6\. JDBC 1
> align=`left`,textColor=`#333333`


#### зачем нужен
> align=`left`,textColor=`#333333`


#### основные интерфейсы
> align=`left`,textColor=`#333333`


#### получение данных в приложении из БД
> align=`left`,textColor=`#333333`


#### обновление и удаление данных в приложении из БДа
> align=`left`,textColor=`#333333`


#### 7\. JDBC 2
> align=`left`,textColor=`#333333`


#### транзакции
> align=`left`,textColor=`#333333`


#### уровни изоляции
> align=`left`,textColor=`#333333`


#### обработка checker исключений
> align=`left`,textColor=`#333333`


#### 8\. ORM\. Hibernate
> align=`left`,textColor=`#333333`


#### нестыковки объектной и реляционной моделей данных
> align=`left`,textColor=`#333333`


#### ORM \(Hibernate\), JPA
> align=`left`,textColor=`#333333`


#### архитектура hibernate
> align=`left`,textColor=`#333333`


#### конфигурация, основные аннотации
> align=`left`,textColor=`#333333`


#### получение данных в приложении из БД
> align=`left`,textColor=`#333333`


#### обновление и удаление данных в приложении из БД
> align=`left`,textColor=`#333333`


#### Hibernate VS JDBC
> align=`left`,textColor=`#333333`


#### 9\. Hibernate\. OneTo…, ManyTo\.\.
> align=`left`,textColor=`#333333`


#### отношения \(работа с коллекциями\)
> align=`left`,textColor=`#333333`


#### 10\. Наследование Entity for ORM
> align=`left`,textColor=`#333333`


#### одна таблица для каждого класса
> align=`left`,textColor=`#333333`


#### одна таблица для каждого класса с предками
> align=`left`,textColor=`#333333`


#### единая таблица для всей иерархии классов
> align=`left`,textColor=`#333333`


#### одна таблица для каждого класса с использованием соединений \(join\)
> align=`left`,textColor=`#333333`


#### 11\. Итоговый проект
> align=`left`,textColor=`#333333`


#### hash for passwords
> align=`left`,textColor=`#333333`


### МОДУЛЬ 5\. Spring \+ Spring Boot
> align=`left`,textColor=`#333333`


#### 1\. IoC, DI\. Spring\. Components\. Beans
> align=`left`,textColor=`#333333`


#### почему Spring стал де\-факто стандартом отрасли \(преимущества\)
> align=`left`,textColor=`#333333`


#### принципы IoC и DI
> align=`left`,textColor=`#333333`


#### бин
> align=`left`,textColor=`#333333`


#### контекст \(ApplicationContext\)
> align=`left`,textColor=`#333333`


#### AOP
> align=`left`,textColor=`#333333`


#### 2\. Spring modules general\. Spring Web MVC
> align=`left`,textColor=`#333333`


#### core \(beans, core, context, SpEL\)
> align=`left`,textColor=`#333333`


#### data access
> align=`left`,textColor=`#333333`


#### testing
> align=`left`,textColor=`#333333`


#### web
> align=`left`,textColor=`#333333`


#### integration
> align=`left`,textColor=`#333333`


#### web mvc
> align=`left`,textColor=`#333333`


#### 3\. Проектирование REST API
> align=`left`,textColor=`#333333`


#### оперирование ресурсами, а не методами
> align=`left`,textColor=`#333333`


#### http методы
> align=`left`,textColor=`#333333`


#### http коды ответов
> align=`left`,textColor=`#333333`


#### ошибки
> align=`left`,textColor=`#333333`


#### запрос коллекции
> align=`left`,textColor=`#333333`


#### запрос количества объектов в коллекции
> align=`left`,textColor=`#333333`


#### запрос объекта коллекции
> align=`left`,textColor=`#333333`


#### добавление данных в коллекцию
> align=`left`,textColor=`#333333`


#### редактирование
> align=`left`,textColor=`#333333`


#### удаление
> align=`left`,textColor=`#333333`


#### д\.з\. спроектировать 2\-ранговый REST API
> align=`left`,textColor=`#333333`


#### 4\. App controller\-service\-dao
> align=`left`,textColor=`#333333`


#### иерархия контекстов
> align=`left`,textColor=`#333333`


#### servlet config
> align=`left`,textColor=`#333333`


#### контроллер \- прием запроса
> align=`left`,textColor=`#333333`


#### сервис \- бизнес логика
> align=`left`,textColor=`#333333`


#### dao \- хранение состояния
> align=`left`,textColor=`#333333`


#### 5\. Spring ORM\. @Transaction
> align=`left`,textColor=`#333333`


#### абстракция “транзакция”
> align=`left`,textColor=`#333333`


#### декларативные транзакции
> align=`left`,textColor=`#333333`


#### transaction propagation
> align=`left`,textColor=`#333333`


#### преимущества ORM \+ Spring
> align=`left`,textColor=`#333333`


#### настройка hibernate SessionFactory
> align=`left`,textColor=`#333333`


#### live coding example
> align=`left`,textColor=`#333333`


#### 6\. Spring Test\. AOP \(logging\)
> align=`left`,textColor=`#333333`


#### unit testing
> align=`left`,textColor=`#333333`


#### integration testing
> align=`left`,textColor=`#333333`


#### основные аннотации
> align=`left`,textColor=`#333333`


#### TestContext
> align=`left`,textColor=`#333333`


#### live coding example \(тестирование API\-метода или пары методов\)
> align=`left`,textColor=`#333333`


#### spring commons logging bridge
> align=`left`,textColor=`#333333`


#### 7\. Spring Security \(memory, DB\)
> align=`left`,textColor=`#333333`


#### ключевые объекты контекста spring security: SecurityContextHolder, Authentication, UserDetails, GrantedAuthority
> align=`left`,textColor=`#333333`


#### авторизация и аутентификация
> align=`left`,textColor=`#333333`


#### OAuth2
> align=`left`,textColor=`#333333`


#### сессии в памяти
> align=`left`,textColor=`#333333`


#### сессии в БД
> align=`left`,textColor=`#333333`


#### 8\. Spring Boot\. Spring JPA
> align=`left`,textColor=`#333333`


#### стартеры
> align=`left`,textColor=`#333333`


#### автоконфигурация
> align=`left`,textColor=`#333333`


#### встроенные tomcat
> align=`left`,textColor=`#333333`


#### аннотации конфигурации
> align=`left`,textColor=`#333333`


#### демонстрация spring data jpa \(генерация запроса по названию метода в рантайме\)
> align=`left`,textColor=`#333333`


### Стажировка JavaEE
> align=`left`,textColor=`#333333`


#### Неделя 1: Системы управления версиями
> align=`left`,textColor=`#333333`


#### Неделя 2: Maven\. WAR\. Веб\-контейнер Tomcat\. Сервлеты\. Логгирование
> align=`left`,textColor=`#333333`


#### Неделя 3: Обзор Spring Framework\. Spring Context\. Слои приложения\. Создание каркаса приложения\.
> align=`left`,textColor=`#333333`


#### Неделя 4: Spring context, JUnit, ORM
> align=`left`,textColor=`#333333`


#### Неделя 5: Hibernate\. JPA
> align=`left`,textColor=`#333333`


#### Неделя 6: Транзакции\. Профили Maven и Spring\. Пулы коннектов\. Spring Data JPA\. Spring кэш
> align=`left`,textColor=`#333333`


#### Неделя 7: Кэш Hibernate\. Spring Web MVC
> align=`left`,textColor=`#333333`


#### Неделя 8: REST
> align=`left`,textColor=`#333333`


#### Неделя 9: Bootstrap\. Datatables\. AJAX\. jQuery\. Spring Security
> align=`left`,textColor=`#333333`


#### Неделя 10: Шифрование пароля\. Binding\. Spring Security Test\.
> align=`left`,textColor=`#333333`


#### Неделя 11: CSRF\. JSTL\. Taglib\.
> align=`left`,textColor=`#333333`


#### Неделя 12: Деплой в PaaS\-платформу Heroku\.
> align=`left`,textColor=`#333333`


#### Неделя 13: Миграция\.
> align=`left`,textColor=`#333333`


### Технологии
> align=`left`,fillColor=`#E8E8E8`,textColor=`#333333`


#### Docker
> align=`left`,textColor=`#333333`


#### REST API через SPRING
> align=`left`,textColor=`#333333`


#### Тестирование 
> align=`left`,textColor=`#333333`


##### Фреймворк с HTTP клиентом retrofit
> align=`left`,textColor=`#333333`


##### Пакет Steps
> align=`left`,textColor=`#333333`


##### Обёртках для  DropDown и CheckBox
> align=`left`,textColor=`#333333`


#### Настройка CI/CD
> align=`left`,textColor=`#333333`


##### Jenkins\(Piplines\)
> align=`left`,textColor=`#333333`


##### запуск по расписанию
> align=`left`,textColor=`#333333`


##### запуск после деплоя на продакшен и т\.д\.
> align=`left`,textColor=`#333333`


#### git, настройка
> align=`left`,textColor=`#333333`


#### Allure report
> align=`left`,textColor=`#333333`


#### Selenium Java тестовый класс
> align=`left`,textColor=`#333333`


#### PageObject \+ PageFactory
> align=`left`,textColor=`#333333`


#### Rest Assured
> align=`left`,textColor=`#333333`


##### Проверки самые основные
> align=`left`,textColor=`#333333`


##### https://reqres\.in/
> align=`left`,textColor=`#333333`


###### Сайт для тестирования
> align=`left`,textColor=`#333333`


##### Настройка Maven project
> align=`left`,textColor=`#333333`


###### Подключение зависимостей
> align=`left`,textColor=`#333333`


####### selenium
> align=`left`,textColor=`#333333`


####### rest assured
> align=`left`,textColor=`#333333`


####### junit
> align=`left`,textColor=`#333333`


###### Структуризация проекта по пакетам/папкам
> align=`left`,textColor=`#333333`


###### Test Junit
> align=`left`,textColor=`#333333`


####### @Before
> align=`left`,textColor=`#333333`


######## До запуска тестов 
> align=`left`,textColor=`#333333`


####### @After
> align=`left`,textColor=`#333333`


######## После отработки тестов
> align=`left`,textColor=`#333333`


####### @BeforeTest
> align=`left`,textColor=`#333333`


######## Подготовка до запуска тестов
> align=`left`,textColor=`#333333`


####### @Test
> align=`left`,textColor=`#333333`


######## Тестовый случай
> align=`left`,textColor=`#333333`


####### @AfterTest
> align=`left`,textColor=`#333333`


######## Окончательные действия после отработки тестового случая
> align=`left`,textColor=`#333333`


##### Какие библbотеки будем использовать для работы с REST?
> align=`left`,textColor=`#333333`


###### REST Assured
> align=`left`,textColor=`#333333`


###### Импортируем зависимости
> align=`left`,textColor=`#333333`


###### Maven Rest Assured
> align=`left`,textColor=`#333333`


####### Gradle
> align=`left`,textColor=`#333333`


##### POJO классы
> align=`left`,textColor=`#333333`


###### Спецификация
> align=`left`,textColor=`#333333`


####### Статусы ответов
> align=`left`,textColor=`#333333`


##### Тестируем готовые методы
> align=`left`,textColor=`#333333`


###### GET POST PUT DELETE PATCH
> align=`left`,textColor=`#333333`


##### Паттер по POJO классам
> align=`left`,textColor=`#333333`


###### Ответ от сервера разбиваем на классы
> align=`left`,textColor=`#333333`


###### JSON ответ от сервера разбиваем на классы\) 
> align=`left`,textColor=`#333333`


###### Getter
> align=`left`,textColor=`#333333`


####### Setter
> align=`left`,textColor=`#333333`


######## Constructor 
> align=`left`,textColor=`#333333`


##### JSON to POJO
> align=`left`,textColor=`#333333`


###### online service
> align=`left`,textColor=`#333333`


###### Перевод в JAVA формат
> align=`left`,textColor=`#333333`


###### С помощью библеотеки REST Assured
> align=`left`,textColor=`#333333`


####### Мы может ответ сервера можем извлечь ответ сервера извлечь сразу в класс
> align=`left`,textColor=`#333333`


###### ГЛАВНОЕ, название в классе должно быть точно такое же, как название переменой в JSON
> align=`left`,textColor=`#333333`


####### id \- id
> align=`left`,textColor=`#333333`


####### email \- email
> align=`left`,textColor=`#333333`


###### Переписывает тип переменой в расширеный формат
> align=`left`,textColor=`#333333`


####### int
> align=`left`,textColor=`#333333`


######## Integer
> align=`left`,textColor=`#333333`


####### str
> align=`left`,textColor=`#333333`


######## String
> align=`left`,textColor=`#333333`


####### bool
> align=`left`,textColor=`#333333`


######## Boolean
> align=`left`,textColor=`#333333`


###### Соблюдаем правило ООП
> align=`left`,textColor=`#333333`


####### Изменяем public в private
> align=`left`,textColor=`#333333`


###### Для дальнейшей работы необходимо создавать конструкторы классов 
> align=`left`,textColor=`#333333`


####### При извлечение ответа сервера, мы создаем конструктор, чтобы у нас заполнились переменные  класса
> align=`left`,textColor=`#333333`


####### Alt \+ insert
> align=`left`,textColor=`#333333`


####### Переименовывает конструктор под название класса где будет работать конструктор
> align=`left`,textColor=`#333333`


###### Создаем гетторы для дальнейшего получения данных из класса
> align=`left`,textColor=`#333333`


####### Генерация Getter для всех переменных
> align=`left`,textColor=`#333333`


####### Alt \+ insert
> align=`left`,textColor=`#333333`


####### С помощью геттеров мы будет сравнивать ожидаемый и реальный результат
> align=`left`,textColor=`#333333`


###### Суть основных проверить\. ПРОВЕРИТЬ ожидаемый и реальный результат 
> align=`left`,textColor=`#333333`


###### 1\. Сгенерировать переменые из JSON в POJO
> align=`left`,textColor=`#333333`


###### 2\. Изменить тип переменных в расширенный формат
> align=`left`,textColor=`#333333`


###### 3\. Соблюдаем правило ООП Изменяем public в private
> align=`left`,textColor=`#333333`


###### 4\. Создавать конструктор классов 
> align=`left`,textColor=`#333333`


####### Alt \+ insert
> align=`left`,textColor=`#333333`


####### Создать пустой конструктор по умолчанию
> align=`left`,textColor=`#333333`


###### 5\. Создаем getter
> align=`left`,textColor=`#333333`


####### Alt \+ insert
> align=`left`,textColor=`#333333`


##### Ошибки МАВЕН
> align=`left`,textColor=`#333333`


###### Cannot deserialize object because no JSON deserializer found in classpath\. Please put Jackson \(Databind\), Gson, Jackson, or Yasson in the classpath
> align=`left`,textColor=`#333333`


####### Установить зависимость
> align=`left`,textColor=`#333333`


##### Десериализация JSON объекта
> align=`left`,textColor=`#333333`


#### Ручное тестирование
> align=`left`,textColor=`#333333`


##### Регресс кейсы / чек листы
> align=`left`,textColor=`#333333`


###### более 1000 кейсов
> align=`left`,textColor=`#333333`


##### Log
> align=`left`,textColor=`#333333`


###### fiddler
> align=`left`,textColor=`#333333`


###### charley
> align=`left`,textColor=`#333333`


###### серверные логи
> align=`left`,textColor=`#333333`


##### SQL
> align=`left`,textColor=`#333333`


###### запросы СУБД CRUD JOIN
> align=`left`,textColor=`#333333`


##### Правила заведения 
> align=`left`,textColor=`#333333`


###### Тестов 
> align=`left`,textColor=`#333333`


###### Дефектов
> align=`left`,textColor=`#333333`

